<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

/**
 * Pages of website
 *
 * Storages instances of the pages of the website.
 */
class CreatePagesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('pages', function (Blueprint $table) {

            $table->increments('id');

            /**
             * Дата создания страницы и дата изменения страницы.
             */
            $table->timestamps();

            /**
             * Дата публикации страницы.
             *
             * Может использовать как дату публикации или дата, с которой нужно
             * опубликовать страницу, если она имеет статус опубликованной страницы.
             */
            $table->timestamp('published_at')->nullable()->index();

            /**
             * Тип страницы или тип связанной сущности.
             *
             * Типы страницы предназначены для сайтов-каталогов, интернет-магазинов,
             * и других "собирающих" сайтов,
             * чтобы определять зависимости страниц и загрузку дополнительных данных.
             * Т.е. указание типа отличного от page указывает на наличие связи
             * с другими независимыми данными (могут использоваться независимо
             * от текущей страницы).
             *
             * Например:
             * 1. page - связан только с отображением страницы, т.е. сам с собой;
             * 2. product - связан с отображением конкретного продукта;
             * 3. category - связан с отображением конкретной категории;
             * 4. user - связан с отображением информации о конкретном
             * пользователи;
             * 5. file - связан с отображением информации о конкретном файле и т.д.
             *
             * Тип страницы может быть абсолютно любым, а его логика зависит
             * от наличия соответствующих обработчиков данных.
             * Кроме того, связи моделей могут иметь отношения многие к одному и
             * один к одному, но не многие ко многим.
             */
            $table->string('entity_type')->default('page')->index();

            /**
             * ID связанной сущности.
             *
             * Используется для определения связи с другими сущностями.
             * Поскольку страница не может быть связана сама с собой, то в
             * качестве отсутствия связи указывается null.
             * Также ID связанной сущности может быть заменен на ID другой
             * сущности такого же типа.
             */
            $table->unsignedInteger('entity_id')->nullable()->index();

            /**
             * Приоритет отображения.
             *
             * Для сортировки записей не использующих сортировку по дате.
             *
             * Например, для страницы списка услуг, где список услуг должен быть
             * в определенном порядке.
             */
            $table->smallInteger('priority')->default(0)->index();

            /**
             * Заголовок страницы или статьи.
             *
             * Реальное значение, которое используется в поисковых системах не
             * превышает 60 символов.
             */
            $table->string('title')->index();

           // TODO переименовать в "зарезервированное поле"/карман?
           // Чтобы использовать под любые цели и хранить все что угодно, но
           // в ограниченном количестве, т.к. данное поле не всегда используется.
            /**
             * Подзаголовок страницы статьи, девиз, слоган, второй заголовок страницы.
             *
             * Может использоваться в качестве других целей, чтобы избежать
             * дополнительных запросов к другим таблицам.
             */
            $table->string('subtitle')->nullable();  // WARNING: deprecated

            // WARNING: Колонки с именем 'multipurpose_*' необязательны
            // и могут использоваться в качестве "помощников" по выборке
            // или обработки страниц.
            // Большую актуальность эти колонки имеют на сайтах-визитках
            // и сайтах-каталогах, на которых не используются
            // или нет необходимости использовать дополнительные пакеты
            // для расширения функций текущего пакета.
            // Использование этих колонок упрощает работу с данными и ускоряет
            // обработку страниц. Рекомендуется хранить в этих столбцах
            // индексируемые значения, за исключением поля multipurpose_text.

            /**
             * Многоцелевое строковое поле.
             *
             * Может использоваться в качестве задания любого строкового
             * значения: подзаголовок, подпись, фраза, слоган, второй
             * заголовок страницы, кодовое слово и т.п.
             * Длина строки ограничена 255 символами и используемой кодировкой
             * таблицы или столбца.
             */
            $table->string('multipurpose_string')->nullable()->index();

            /**
             * Многоцелевое длинное текстовое поле.
             *
             * Может использоваться в качестве задания любого текстового
             * значения: описание страницы, анонс, аннотация, превью,
             * JavaScript и т.п.
             * В отличии от других многоцелевых полей, текущее поле не индексируется.
             */
            $table->text('multipurpose_text')->nullable();

            /**
             * Многоцелевое короткое строковое поле.
             *
             * Может использоваться в качестве задания любого короткого строкового
             * значения: подпись, автор, язык страницы (код языка), шифр, кодовое
             * слово и т.п.
             *
             * Длина строки ограничена 64 символами и используемой кодировкой
             * таблицы или столбца.
             */
            $table->string('multipurpose_short_string', 64)->nullable()->index();

            /**
             * Многоцелевое целочисленное поле.
             *
             * Может использоваться в качестве задания дополнительных
             * ключевых индексов, если значения поля 'entity_id' недостаточно.
             */
            $table->integer('multipurpose_integer')->nullable()->index();

            /**
             * Многоцелевое поле для хранения значения с плавающей запятой.
             *
             * Может использоваться в качестве задания дробных чисел.
             * Такими могут выступать цены, рейтинги и т.п.
             */
            $table->integer('multipurpose_float')->nullable()->index();

            /**
             * Многоцелевое логическое поле.
             *
             * Может использоваться в качестве задания каких-нибудь логических
             * значений, которые могут участвовать при формировании страницы,
             * ее поиске.
             */
            $table->integer('multipurpose_boolean')->nullable()->index();

            /**
             * Описание страницы (анонс, аннотация, превью).
             *
             * Может использоваться вместе с контентом или отдельно от него.
             */
            $table->text('description')->nullable(); // WARNING: deprecated Заменено на multipurpose_text

            /**
             * Содержание страницы (HTML контент, статья).
             *
             * Содержит HTML код.
             */
            $table->longText('content')->nullable();

            /**
             * Тип необработанных данных.
             *
             * Определяет обработчиков, которые отвечают за расшифровку
             * и шифровку данных.
             */
            $table->string('raw_content_type', 68)->nullable();

            /**
             * Содержание необработанного (нескомпилированного) контента страницы.
             *
             * Необработанный контент страницы может использоваться для сохранения
             * данных отличных от HTML или необработанные HTML, которые при
             * сохранении будут конвертированы в соответствующий вид
             * для отображения на странице браузера или в других местах.
             */
            $table->longText('raw_content')->nullable();

            /**
             * Мета-тег description.
             *
             * Используется для отображения в поисковых системах (сниппет).
             * Желательно количество символов 130, но Яндекс отображает около 440.
             * При проверке данных длина строки ограничена 448 символами.
             */
            $table->string('description_tag', 511)->nullable();

            /**
             * Мета-тег keywords.
             *
             * Ключевые слова страницы.
             * Может использоваться при поиске на сайте и некоторыми поисковыми
             * системами.
             */
            $table->string('keywords_tag')->nullable();

            /**
             * Категория страницы.
             */
            $table->unsignedInteger('category_id')->nullable()->index();

            /**
             * Шаблоны страницы.
             *
             * Ссылается на таблицу 'templates'.
             */
            $table->unsignedInteger('template_id')->nullable()->index();

            /**
             * Создатель страницы (автор страницы).
             *
             * Ссылается на таблицу 'users'.
             */
            $table->unsignedInteger('author_id')->index();

            /**
             * Редактор страницы (последний пользователь изменивший страницу).
             *
             * Ссылается на таблицу 'users'.
             */
            $table->unsignedInteger('editor_id')->index();

            /**
             * Обложка страницы
             *
             * Ссылается на таблицу 'files' указывая изображение или другой файл.
             */
            $table->unsignedInteger('cover_id')->nullable()->index();

            /**
             * Состояние страницы.
             *
             * Определяет доступность и готовность страницы.
             */
            $table->enum('state', ['draft', 'published', 'verification', 'unpublished']/*\PageStatus::getConstants()*/)->default('draft'/*\PageStatus::DRAFT*/)->index();

            /**
             * Человеко-понятный URL.
             *
             * Используется для создания запоминаемого URL.
             */
            $table->string('slug')->nullable()->index();

            /**
             * Ссылка на страницу.
             *
             * Ссылка на страницу используется для поиска страницы по указанному
             * URL.
             * Если на сайте используется древовидная система ссылок, то
             * в этом поле будет сохранена "полная" ссылка на страницу.
             * Если используется одиночная ссылка, то это поле будет
             * соответствовать значению поля slug.
             */
            $table->string('link')->nullable()->index();

            /**
             * Родительская страница.
             *
             * Используется для создания серии страниц (статей, истории) или
             * иерархии принадлежности страниц.
             *
             * Может ссылаться на страницу указанного шаблона.
             * Например, все страницы услуг могут принадлежать странице "Услуги".
             * При загрузке страницы "Услуги" будут вызываться потомки страниц,
             * т.е. услуги.
             * Т.о. для разных языков можно создавать разные услуги или если
             * шаблон "Услуги" может иметь разные страницы, то все они будут
             * принадлежать разным группам и создавать иерархию принадлежности
             * услуг.
             */
            $table->unsignedInteger('parent_id')->default(0)->index();

            /**
             * Важная страница.
             *
             * Значение "true" означает важность этой страницы и может использоваться
             * при выдаче списка страниц. Например, вывести основные услуги,
             * важные записи, использование в автогенерации меню и т.д.
             * Отсутствие этого значения делает страницу обычной.
             */
            $table->boolean('important')->default(false);

            /**
             * Индексация страницы.
             *
             * Содержит настройки индексации страниц для поисковых систем.
             * Значения хранятся в формате JSON или TEXT, позволяя сохранять
             * массовые настройки, для разных поисковых систем, для разных
             * роботов и даже с особенными настройками страниц.
             *
             * WARNING: логику обработки полей, сохранения и т.п. нужно делать в
             * сохранениях страниц и их загрузки. Здесь специально не применяется
             * тип boolean, т.к. он ограничивает возможности настройки
             * индексации страниц.
             */
            $table->text('indexing')->nullable();  // json

            /**
             * Опции страницы.
             *
             * Дополнительные настройки страницы, для управлениях которых
             * не заданы отдельные колонки в таблице.
             */
            $table->text('options')->nullable(); // json
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('pages');
    }
}
